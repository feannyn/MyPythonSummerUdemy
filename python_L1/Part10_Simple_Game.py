###########################
## PART 10: Simple Game ###
### --- CODEBREAKER --- ###
## --Nope--Close--Match--  ##
###########################

# It's time to actually make a simple command line game so put together everything
# you've learned so far about Python. The game goes like this:

# 1. The computer will think of 3 digit number that has no repeating digits.
# 2. You will then guess a 3 digit number
# 3. The computer will then give back clues, the possible clues are:
#
#     Close: You've guessed a correct number but in the wrong position
#     Match: You've guessed a correct number in the correct position
#     Nope: You haven't guess any of the numbers correctly
#
# 4. Based on these clues you will guess again until you break the code with a
#    perfect match!

# There are a few things you will have to discover for yourself for this game!
# Here are some useful hints:

# Try to figure out what this code is doing and how it might be useful to you




# Another hint:
import random

def request():
	return list(input("Please enter your guess: "))

def correctNumber():
	digits = [str(num) for num in list(range(10))]
	#digits = list(range(10))
	random.shuffle(digits)
	return  digits[:3]

def guessFunction(compNum, userNum):
	clues = []

	for  i, num in enumerate(userNum):
		if num == compNum[i]:
			clues.append("!!!!MATCH!!!!")

		elif num in compNum:	
				clues.append("Close...")
		else:
			clues.append("No Joy")

	return print(clues)

print("Try to guess the number randomly generated by the computer...")
guess = 0
computerNum = correctNumber()

while guess !=  computerNum:
	guess = request()
	guessFunction(computerNum, guess)


print("SUCCESSSSSSSS")
# Think about how you will compare the input to the random number, what format
# should they be in? Maybe some sort of sequence? Watch the Lecture video for more hints!
